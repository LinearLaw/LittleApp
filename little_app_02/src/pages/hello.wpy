<template>
    <view class="hello">

        <!-- 1、事件绑定 -->
        <view class="viewItem">
            <view class="title">1.1、事件绑定</view>
            <button class="event" @tap="tapEvent('bubble')"> 冒泡tap事件，bindtap——>@tap </button>
            <button @tap.stop="tapEvent('cancle bubble')"> 阻止冒泡的tap，catchtap——>@tap.stop </button>
        </view>
        <view class="viewItem">
            <view class="title">1.2、数据绑定</view>
            <button @tap="switchNotice">Toggle</button>
            <view>提示：<text wx:if="{{ notice }}" class="noticeInfo">摩根大通，摩根史丹利</text></view>
        </view>

        <!-- 2、列表渲染、条件渲染 -->
        <view class="viewItem">
            <view class="title">2.1、列表渲染</view>
            <text class="noticeInfo"> 第一种形式：列表循环，repeat需要指定for循环，\n 需指定key，index和item三个值 </text>
            <repeat for="{{ arrData }}" key="_in" index="_in" item="_va">
              <view class="circleText">
                {{ _va.acc }} + {{ _va.basa }}
              </view>
            </repeat>
            <text class="noticeInfo"> 第二种形式：列表循环 + 条件渲染，\n repeat需要指定for循环，\n wx:if来决定每一项是否显示 </text>
            <repeat for="{{ arrData }}" key="_in" index="_in" item="_va">
              <view class="circleText" wx:if="{{ _va.acc>2000?true:false }}">
                {{ _va.acc }} + {{ _va.basa }}
              </view>
            </repeat>
        </view>

        <!-- 3、组件通信 -->
        <view class="viewItem">
            <view class="title">3.1、子组件向父组件传值</view>
            <view class="threeCom">现在的时间：{{timeNow}}</view>
            <ChildComponent1 @updateDate="updateDate"></ChildComponent1>
            <view class="title">3.2、父组件向子组件传值</view>
            <view class="threeCom">现在的时间：{{timeNow}}</view>
            <ChildComponent1 :parentData.sync="parentData"></ChildComponent1>
        </view>

    </view>

</template>

<script>
    /**
     * @desc 综合验证
            1、事件绑定、数据绑定
            2、列表渲染、条件渲染
            3、组件通信
                （1）、父元素向子元素传值
                （2）、子元素向父元素传值
                （3）、跨组件通信
            4、Tab实现
            5、Slot内容分发
            6、Ajax请求
            7、请求拦截器
            8、原生能力调取

     */
    import wepy from "wepy";

    import ChildComponent1 from "../components/helloComponent/childComponent_1";
    export default class Hello extends wepy.page{
        config = {
            navigationBarTitleText: 'Hello world'
        }
        data = {
            notice:true,
            arrData:[
              { acc:"1234",basa:"56781111" },
              { acc:"3463",basa:"5608908978" },
              { acc:"12375474",basa:"9789" },
              { acc:"98-8967",basa:"89056" },
              { acc:"5696",basa:"0674" }
            ],
            timeNow:new Date(),
            parentData:"ojbk"

        }
        components = {
          ChildComponent1
        }

        /**
         * @desc methods 里面只放原生事件触发的函数，最后一个参数为事件对象，
                通过事件对象，可以访问到触发事件的DOM元素。
         */
        methods = {
            tapEvent(text,event){
                console.log("tap event occured : " + text  );
            },
            switchNotice(){
                this.notice = !this.notice;
                //访问app.wpy的全局方法，使用this.$parent
                this.$parent.showTestInfo();
            }
        }
        /**
         * @desc 与methods不同的是，events主要存放的是$broadcast、$emit、$invoke等事件的函数。
         */
        events = {
          'updateDate':(time,$event)=>{
            this.timeNow = time;
          }
        }
    }
</script>
<style lang="less">
    .hello{
        padding:10px;
    }
    .viewItem{
        font-size:15px;
        button{
            font-size:14px;
            margin-top:10px;
        }
        .title{
          font-weight:600;
          margin:10px 0;
        }
        .noticeInfo{
            font-size:14px;
            color:#ff4300;
        }
        .circleText{
            font-size:14px;
            color:green;
        }
        .threeCom{
          font-size:14px;
          color:skyblue;
        }
    }

</style>
